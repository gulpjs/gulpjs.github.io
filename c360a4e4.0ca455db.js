(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{164:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(10),b=(a(0),a(176)),i={id:"vinyl",title:"Vinyl",hide_title:!0,sidebar_label:"Vinyl"},c={id:"api/vinyl",title:"Vinyl",description:"# Vinyl",source:"@site/docs/api/vinyl.md",permalink:"/docs/en/api/vinyl",sidebar_label:"Vinyl",sidebar:"docs",previous:{title:"tree()",permalink:"/docs/en/api/tree"},next:{title:"Vinyl.isVinyl()",permalink:"/docs/en/api/vinyl-isvinyl"}},l=[{value:"Usage",id:"usage",children:[]},{value:"Signature",id:"signature",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Returns",id:"returns",children:[]},{value:"Errors",id:"errors",children:[]},{value:"Options",id:"options",children:[]}]},{value:"Vinyl instance",id:"vinyl-instance",children:[{value:"Instance properties",id:"instance-properties",children:[]},{value:"Instance methods",id:"instance-methods",children:[]}]},{value:"Normalization and concatenation",id:"normalization-and-concatenation",children:[]}],o={rightToc:l};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"vinyl"},"Vinyl"),Object(b.b)("p",null,"A virtual file format. When a file is read by ",Object(b.b)("inlineCode",{parentName:"p"},"src()"),", a Vinyl object is generated to represent the file - including the path, contents, and other metadata."),Object(b.b)("p",null,"Vinyl objects can have transformations applied using ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/en/getting-started/using-plugins"}),"plugins"),". They may also be persisted to the file system using ",Object(b.b)("inlineCode",{parentName:"p"},"dest()"),"."),Object(b.b)("p",null,"When creating your own Vinyl objects - instead of generating with ",Object(b.b)("inlineCode",{parentName:"p"},"src()")," - use the external ",Object(b.b)("inlineCode",{parentName:"p"},"vinyl")," module, as shown in Usage below."),Object(b.b)("h2",{id:"usage"},"Usage"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const Vinyl = require('vinyl');\n\nconst file = new Vinyl({\n  cwd: '/',\n  base: '/test/',\n  path: '/test/file.js',\n  contents: new Buffer('var x = 123')\n});\n\nfile.relative === 'file.js';\n\nfile.dirname === '/test';\nfile.dirname = '/specs';\nfile.path === '/specs/file.js';\n\nfile.basename === 'file.js';\nfile.basename = 'file.txt';\nfile.path === '/specs/file.txt';\n\nfile.stem === 'file';\nfile.stem = 'foo';\nfile.path === '/specs/foo.txt';\nfile.extname === '.txt';\nfile.extname = '.js';\nfile.path === '/specs/foo.js';\n")),Object(b.b)("h2",{id:"signature"},"Signature"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"new Vinyl([options])\n")),Object(b.b)("h3",{id:"parameters"},"Parameters"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"parameter"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"note"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"options"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"object"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Detailed in ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#options"}),"Options")," below.")))),Object(b.b)("h3",{id:"returns"},"Returns"),Object(b.b)("p",null,"An instance of the Vinyl class representing a single virtual file, detailed in ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"#vinyl-instance"}),"Vinyl instance")," below."),Object(b.b)("h3",{id:"errors"},"Errors"),Object(b.b)("p",null,"When any passed options don't conform to the ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"#instance-properties"}),"instance property definitions")," (like if ",Object(b.b)("inlineCode",{parentName:"p"},"path")," is set to a number) throws as defined in the table."),Object(b.b)("h3",{id:"options"},"Options"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"default"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"note"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"cwd"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"process.cwd()")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The directory from which relative paths will be derived. Will be ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#normalization-and-concatenation"}),"normalized")," and have trailing separators removed.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"base"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Used to calculate the ",Object(b.b)("inlineCode",{parentName:"td"},"relative")," instance property. Falls back to the value of ",Object(b.b)("inlineCode",{parentName:"td"},"cwd")," if not set. Typically set to the ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/en/api/concepts#glob-base"}),"glob base"),". Will be ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#normalization-and-concatenation"}),"normalized")," and have trailing separators removed.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"path"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The full, absolute file path. Will be ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#normalization-and-concatenation"}),"normalized")," and have trailing separators removed.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"history"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"array"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"[ ]")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array of paths to pre-populate the ",Object(b.b)("inlineCode",{parentName:"td"},"history")," of a Vinyl instance. Usually comes from deriving a new Vinyl object from a previous Vinyl object. If ",Object(b.b)("inlineCode",{parentName:"td"},"path")," and ",Object(b.b)("inlineCode",{parentName:"td"},"history")," are both passed, ",Object(b.b)("inlineCode",{parentName:"td"},"path")," is appended to ",Object(b.b)("inlineCode",{parentName:"td"},"history"),". Each item will be ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#normalization-and-concatenation"}),"normalized")," and have trailing separators removed.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"stat"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"object"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An instance of ",Object(b.b)("inlineCode",{parentName:"td"},"fs.Stats"),", usually the result of calling ",Object(b.b)("inlineCode",{parentName:"td"},"fs.stat()")," on a file. Used to determine if a Vinyl object represents a directory or symbolic link.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"contents"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"ReadableStream",Object(b.b)("br",null),"Buffer",Object(b.b)("br",null),Object(b.b)("inlineCode",{parentName:"td"},"null")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"null")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The contents of the file. If ",Object(b.b)("inlineCode",{parentName:"td"},"contents")," is a ReadableStream, it is wrapped in a ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"https://github.com/mcollina/cloneable-readable"}),"cloneable-readable")," stream.")))),Object(b.b)("p",null,"Any other properties on ",Object(b.b)("inlineCode",{parentName:"p"},"options")," will be directly assigned to the Vinyl instance."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const Vinyl = require('vinyl');\n\nconst file = new Vinyl({ foo: 'bar' });\nfile.foo === 'bar';\n")),Object(b.b)("h2",{id:"vinyl-instance"},"Vinyl instance"),Object(b.b)("p",null,"Each instance of a Vinyl object will have properties and methods to access and/or modify information about the virtual file."),Object(b.b)("h3",{id:"instance-properties"},"Instance properties"),Object(b.b)("p",null,"All internally managed paths - any instance property except ",Object(b.b)("inlineCode",{parentName:"p"},"contents")," and ",Object(b.b)("inlineCode",{parentName:"p"},"stat")," - are normalized and have trailing separators removed. See ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"#normalization-and-concatenation"}),"Normalization and concatenation")," for more information."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"property"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"throws"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"contents"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"ReadableStream",Object(b.b)("br",null),"Buffer",Object(b.b)("br",null),Object(b.b)("inlineCode",{parentName:"td"},"null")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets the contents of the virtual file. If set to a ReadableStream, it is wrapped in a ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"https://github.com/mcollina/cloneable-readable"}),"cloneable-readable")," stream."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If set to any value other than a ReadableStream, a Buffer, or ",Object(b.b)("inlineCode",{parentName:"td"},"null"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"stat"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"object"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets an instance of ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/en/api/concepts#file-system-stats"}),Object(b.b)("inlineCode",{parentName:"a"},"fs.Stats")),". Used when determining if a Vinyl object represents a directory or symbolic link."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"cwd"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets the current working directory. Used for deriving relative paths."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If set to an empty string or any non-string value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"base"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets the base directory. Used to calculate the ",Object(b.b)("inlineCode",{parentName:"td"},"relative")," instance property. On a Vinyl object generated by ",Object(b.b)("inlineCode",{parentName:"td"},"src()")," will be set to the ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/en/api/concepts#glob-base"}),"glob base"),". If set to ",Object(b.b)("inlineCode",{parentName:"td"},"null")," or ",Object(b.b)("inlineCode",{parentName:"td"},"undefined"),", falls back to the value of the ",Object(b.b)("inlineCode",{parentName:"td"},"cwd")," instance property."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If set to an empty string or any non-string value (except ",Object(b.b)("inlineCode",{parentName:"td"},"null")," or ",Object(b.b)("inlineCode",{parentName:"td"},"undefined"),").")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"path"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets the full, absolute file path. Setting to a value different from the current ",Object(b.b)("inlineCode",{parentName:"td"},"path")," appends the new path to the ",Object(b.b)("inlineCode",{parentName:"td"},"history")," instance property."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If set to any non-string value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"history"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"array"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Array of all ",Object(b.b)("inlineCode",{parentName:"td"},"path")," values the Vinyl object has been assigned. The first element is the original path and the last element is the current path. This property and its elements should be treated as read-only and only altered indirectly by setting the ",Object(b.b)("inlineCode",{parentName:"td"},"path")," instance property."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"relative"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets the relative path segment between the ",Object(b.b)("inlineCode",{parentName:"td"},"base")," and the ",Object(b.b)("inlineCode",{parentName:"td"},"path")," instance properties."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If set to any value. If accessed when ",Object(b.b)("inlineCode",{parentName:"td"},"path")," is not available.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"dirname"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets the directory of the ",Object(b.b)("inlineCode",{parentName:"td"},"path")," instance property."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If accessed when ",Object(b.b)("inlineCode",{parentName:"td"},"path")," is not available.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"stem"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets the stem (filename without extension) of the ",Object(b.b)("inlineCode",{parentName:"td"},"path")," instance property."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If accessed when ",Object(b.b)("inlineCode",{parentName:"td"},"path")," is not available.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"extname"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets the extension of the ",Object(b.b)("inlineCode",{parentName:"td"},"path")," instance property."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If accessed when ",Object(b.b)("inlineCode",{parentName:"td"},"path")," is not available.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"basename"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets the filename (",Object(b.b)("inlineCode",{parentName:"td"},"stem + extname"),") of the ",Object(b.b)("inlineCode",{parentName:"td"},"path")," instance property."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If accessed when ",Object(b.b)("inlineCode",{parentName:"td"},"path")," is not available.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"symlink"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Gets and sets the reference path of a symbolic link."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If set to any non-string value.")))),Object(b.b)("h3",{id:"instance-methods"},"Instance methods"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"method"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"return type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"returns"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"isBuffer()")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If the ",Object(b.b)("inlineCode",{parentName:"td"},"contents")," instance property is a Buffer, returns true.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"isStream()")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If the ",Object(b.b)("inlineCode",{parentName:"td"},"contents")," instance property is a Stream, returns true.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"isNull()")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If the ",Object(b.b)("inlineCode",{parentName:"td"},"contents")," instance property is ",Object(b.b)("inlineCode",{parentName:"td"},"null"),", returns true.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"isDirectory()")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If the instance represents a directory, returns true. An instance is considered a directory when ",Object(b.b)("inlineCode",{parentName:"td"},"isNull()")," returns true, the ",Object(b.b)("inlineCode",{parentName:"td"},"stat")," instance property is an object, and ",Object(b.b)("inlineCode",{parentName:"td"},"stat.isDirectory()")," returns true. This assumes a Vinyl object was constructed with a valid (or properly mocked) ",Object(b.b)("inlineCode",{parentName:"td"},"fs.Stats")," object.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"isSymbolic()")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If the instance represents a symbolic link, returns true. An instance is considered symbolic when ",Object(b.b)("inlineCode",{parentName:"td"},"isNull()")," returns true, the ",Object(b.b)("inlineCode",{parentName:"td"},"stat")," instance property is an object, and ",Object(b.b)("inlineCode",{parentName:"td"},"stat.isSymbolicLink()")," returns true. This assumes a Vinyl object was constructed with a valid (or properly mocked) ",Object(b.b)("inlineCode",{parentName:"td"},"fs.Stats")," object.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"clone([options])")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"object"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A new Vinyl object with all properties cloned. By default custom properties are deep cloned. If the ",Object(b.b)("inlineCode",{parentName:"td"},"deep")," option is false, custom attributes will be shallow cloned. If the ",Object(b.b)("inlineCode",{parentName:"td"},"contents")," option is false and the ",Object(b.b)("inlineCode",{parentName:"td"},"contents")," instance property is a Buffer, the Buffer will be reused instead of cloned.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"inspect()")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns a formatted interpretation of the Vinyl object. Automatically called by Node's console.log.")))),Object(b.b)("h2",{id:"normalization-and-concatenation"},"Normalization and concatenation"),Object(b.b)("p",null,"All path properties are normalized by their setters. Concatenate paths with ",Object(b.b)("inlineCode",{parentName:"p"},"/"),", instead of using ",Object(b.b)("inlineCode",{parentName:"p"},"path.join()"),", and normalization will occur properly on all platforms. Never concatenate with ",Object(b.b)("inlineCode",{parentName:"p"},"\\")," - it  is a valid filename character on POSIX system."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const file = new File();\nfile.path = '/' + 'test' + '/' + 'foo.bar';\n\nconsole.log(file.path);\n// posix => /test/foo.bar\n// win32 => \\\\test\\\\foo.bar\n")))}p.isMDXComponent=!0},176:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},d=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},j=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,i=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=p(a),j=n,O=d["".concat(i,".").concat(j)]||d[j]||s[j]||b;return a?r.a.createElement(O,c(c({ref:t},o),{},{components:a})):r.a.createElement(O,c({ref:t},o))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,i=new Array(b);i[0]=j;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var o=2;o<b;o++)i[o]=a[o];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"}}]);